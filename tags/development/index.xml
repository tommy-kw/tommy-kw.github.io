<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Development on Hola!! </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://tommykw.github.io/tags/development/</link>
    <language>en-us</language>
    
    
    <updated>Thu, 19 Jan 2017 06:15:57 JST</updated>
    
    <item>
      <title>Platform Types</title>
      <link>http://tommykw.github.io/post/platform-types/</link>
      <pubDate>Thu, 19 Jan 2017 06:15:57 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/platform-types/</guid>
      <description>&lt;p&gt;Kotlin is nullsafe, but there are things to keep in mind when using Kotlin from Java.
Kotlin has an implementation that accepts it as &lt;code&gt;T!&lt;/code&gt; Type called Platform types. For example, it is as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fun getString(key:String, defValue:String) = sharedPref.getString(key:String, defValue:String) // platform types. return value is T!
fun getString(key:String, defValue:String): String? = sharedPref.getString(key:String, defValue:String) // Declare it to be nullable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above is a simplified method of &lt;code&gt;SharedPreferences#getString&lt;/code&gt;. but &lt;code&gt;SharedPreferences#getString&lt;/code&gt; returns @Nullable String.
On the Kotlin side, since it is received as &lt;code&gt;String:T!&lt;/code&gt;, there is a possibility of crashing at runtime.&lt;/p&gt;

&lt;p&gt;By describing it as &lt;code&gt;@Nullable&lt;/code&gt; on the Java side, platform types and warnings are displayed on the IDE side. in an environment where Kotlin and Java coexist,
it is necessary to understand platform types. Let&amp;rsquo;s explicitly declare whether it is @Nullable in Java.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Semantic validation</title>
      <link>http://tommykw.github.io/post/semantic-validation/</link>
      <pubDate>Sun, 13 Nov 2016 11:54:37 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/semantic-validation/</guid>
      <description>

&lt;p&gt;Validation of Kotlin function is very useful.
I will explain the semantic validation of Kotlin.&lt;/p&gt;

&lt;h2 id=&#34;argument-validaiton:743419a5e94c81a7bec95dd224f1a608&#34;&gt;Argument validaiton&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;require&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;require&lt;/code&gt; checks arguments.
Seeing the following sources shows you throwing &lt;code&gt;IllegalArgumentException&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@kotlin.internal.InlineOnly
public inline fun require(value: Boolean, lazyMessage: () -&amp;gt; Any): Unit {
    if (!value) {
        val message = lazyMessage()
        throw IllegalArgumentException(message.toString())
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;state-validation:743419a5e94c81a7bec95dd224f1a608&#34;&gt;State validation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;check&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;check&lt;/code&gt; checks states.
Seeing the following sources shows you throwing &lt;code&gt;IllegalStateException&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@kotlin.internal.InlineOnly
public inline fun check(value: Boolean, lazyMessage: () -&amp;gt; Any): Unit {
    if (!value) {
        val message = lazyMessage()
        throw IllegalStateException(message.toString())
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;assertion-validation:743419a5e94c81a7bec95dd224f1a608&#34;&gt;Assertion validation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;assert&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An assertion is described as a row and serves as a checkpoint.
If you describe it before any processing you can check the precondition and if it is
later you can check the postcondition.
Runtime assertions have been enabled on the JVM using the &lt;code&gt;-ea&lt;/code&gt; option.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@kotlin.internal.InlineOnly
public inline fun assert(value: Boolean, lazyMessage:() -&amp;gt; Any) {
    @Suppress(&amp;quot;NON_PUBLIC_CALL_FROM_PUBLIC_INLINE&amp;quot;)
    if (_Assertions.ENABLED) {
        if (!value) {
            val message = lazyMessage()
            throw AssertionError(message)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;require„ÄÅcheck and assert are very useful. I will use it in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nothing</title>
      <link>http://tommykw.github.io/post/nothing/</link>
      <pubDate>Sat, 01 Oct 2016 02:42:06 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/nothing/</guid>
      <description>

&lt;h2 id=&#34;stdlib-kotlin-nothing:e1e42e962a3b8f857a962e6e29c3e8c2&#34;&gt;stdlib / kotlin / Nothing&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;kotlin/core/builtins/native/kotlin/Nothing.kt

public class Nothing private() {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing has no instances. You can use Nothing to represent &amp;ldquo;a value that never exists&amp;rdquo;.
for example. if a function has the return type of Nothing. it means that it never returns.&lt;/p&gt;

&lt;h2 id=&#34;how-to-use:e1e42e962a3b8f857a962e6e29c3e8c2&#34;&gt;How to use&lt;/h2&gt;

&lt;p&gt;When you represent a null is should I use Nothing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fun crash(x:Nothing) {}
&amp;gt;&amp;gt;&amp;gt; crash(&amp;quot;foo&amp;quot;)
error: type mismatch: inferred type is String but Nothing was expected

&amp;gt;&amp;gt;&amp;gt; fun crash(x:Nothing?) {}
&amp;gt;&amp;gt;&amp;gt; crash(null)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Design pattern</title>
      <link>http://tommykw.github.io/post/design-pattern/</link>
      <pubDate>Sun, 25 Sep 2016 23:25:29 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/design-pattern/</guid>
      <description>

&lt;p&gt;I tried to learn the design pattern. I will try to write a sample in kotlin.&lt;/p&gt;

&lt;h2 id=&#34;iterator:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Iterator&lt;/h2&gt;

&lt;h2 id=&#34;adapter:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Adapter&lt;/h2&gt;

&lt;h2 id=&#34;templatemethod:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;TemplateMethod&lt;/h2&gt;

&lt;h2 id=&#34;factorymethod:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;FactoryMethod&lt;/h2&gt;

&lt;h2 id=&#34;singleton:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Singleton&lt;/h2&gt;

&lt;h2 id=&#34;prototype:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Prototype&lt;/h2&gt;

&lt;h2 id=&#34;builder:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Builder&lt;/h2&gt;

&lt;h2 id=&#34;abstractfactory:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;AbstractFactory&lt;/h2&gt;

&lt;h2 id=&#34;bridge:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Bridge&lt;/h2&gt;

&lt;h2 id=&#34;strategy:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Strategy&lt;/h2&gt;

&lt;h2 id=&#34;composite:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Composite&lt;/h2&gt;

&lt;h2 id=&#34;decorator:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Decorator&lt;/h2&gt;

&lt;h2 id=&#34;visitor:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Visitor&lt;/h2&gt;

&lt;h2 id=&#34;chain-of-responsibility:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Chain of Responsibility&lt;/h2&gt;

&lt;h2 id=&#34;facade:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Facade&lt;/h2&gt;

&lt;h2 id=&#34;mediator:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Mediator&lt;/h2&gt;

&lt;h2 id=&#34;observer:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Observer&lt;/h2&gt;

&lt;h2 id=&#34;memento:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Memento&lt;/h2&gt;

&lt;h2 id=&#34;state:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;State&lt;/h2&gt;

&lt;h2 id=&#34;flyweight:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Flyweight&lt;/h2&gt;

&lt;h2 id=&#34;proxy:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Proxy&lt;/h2&gt;

&lt;h2 id=&#34;command:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Command&lt;/h2&gt;

&lt;h2 id=&#34;interpreter:ff3eb39a71c5f6cd78c7b58ca248f4cc&#34;&gt;Interpreter&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>EnclosingClass</title>
      <link>http://tommykw.github.io/post/enclosingClass/</link>
      <pubDate>Fri, 23 Sep 2016 13:28:04 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/enclosingClass/</guid>
      <description>

&lt;h2 id=&#34;what-is-enclosingclass:42cf7e80bdb34d427ada69920409723d&#34;&gt;What is enclosingClass.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/MicroUtils/kotlin-logging/blob/5c297178d7edcae6af2e248328c42dad11adc88c/src/main/kotlin/mu/internal/KLoggerNameResolver.kt
inline private fun &amp;lt;T: Any&amp;gt; unwrapCompanionClass(ofClass: Class&amp;lt;T&amp;gt;): Class&amp;lt;*&amp;gt; = 
    if (ofClass.enclosingClass != null &amp;amp;&amp;amp; ofClass.enclosingClass.kotlin.companionObject?.java == ofClass) {
        ofClass.enclosingClass
    } else {
        ofClass
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Nullpointer serializable</title>
      <link>http://tommykw.github.io/post/nullpointer-serializable/</link>
      <pubDate>Mon, 29 Aug 2016 23:53:03 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/nullpointer-serializable/</guid>
      <description>&lt;p&gt;The following code is nullpointer exception.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private val userLumps by lazy {
    intent.getSerializableExtra(ARG_USER_LUMP) as ArrayList&amp;lt;UserLump&amp;gt;
}
private val adapter = OriginalAdapter(userLumps)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Error details&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Caused by: java.lang.NullPointerException: Attempt to invoke virtual method &#39;java.io.Serializable android.content.Intent.getSerializableExtra(java.lang.String)&#39; on a null object reference
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It becomes null before it is initialized wit the lifecycle proble. No proble if set in onCreate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java generics to kotlin</title>
      <link>http://tommykw.github.io/post/java-generics-to-kotlin/</link>
      <pubDate>Sun, 28 Aug 2016 23:01:04 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/java-generics-to-kotlin/</guid>
      <description>&lt;p&gt;Generics code of java was expressed using the reified of kotlin.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Java
public &amp;lt;T extends BaseCode&amp;gt; T getCode(Class&amp;lt;T&amp;gt; type) {
    return (T) codes.get(type);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# Kotlin
inline fun &amp;lt;reified T : BaseCode&amp;gt; Code.system() = getCode(T::class.java)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Resolve error in AS</title>
      <link>http://tommykw.github.io/post/resolve-error-in-as/</link>
      <pubDate>Thu, 25 Aug 2016 18:58:32 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/resolve-error-in-as/</guid>
      <description>&lt;p&gt;The following error occurred in the android studio.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Resolve Error

SDK location not found. Define location with sdk.dir in the local.properties files
or with an ANDROID_HOME environment variable.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I do the following in the corresponding you in my case.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. Create local.properties
2. Add local.properties to sdk.dir=/Users/xxx/Downloads/android-sdk-macosx
3. set ANDROID_HOME=/Users/xxx/Downloads/android-sdk-macosx/sdk
4. export ANDROID_HOME=/Users/xxx/Downloads/android-sdk-macosx/sdk
5. ./gradlew
6. reinstall android studio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It works.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fragment on fragment</title>
      <link>http://tommykw.github.io/post/fragment-on-fragment/</link>
      <pubDate>Tue, 23 Aug 2016 00:25:42 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/fragment-on-fragment/</guid>
      <description>&lt;p&gt;Implementation of the fragmnet on fragment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val transaction = fragmentManager.beginTransaction()
transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
transaction.replace(R.id.placeholder, fragment).addToBackStack(null).commit()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Drag and drop</title>
      <link>http://tommykw.github.io/post/drag-and-drop/</link>
      <pubDate>Thu, 11 Aug 2016 14:22:18 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/drag-and-drop/</guid>
      <description>&lt;p&gt;The animation implementation of drag-and-drop I wrote in kotlin.
This is a very easy and simple.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// from view
fromView.setOnTouchListener(View.OnTouchListener { view, event -&amp;gt;
    if (event.getAction() == MotionEvent.ACTION_DOWN) {
        val data = ClipData.newPlainText(&amp;quot;&amp;quot;, &amp;quot;&amp;quot;)
        view.startDrag(data, View.DragShadowBuilder(view), view, View.DRAG_FLAG_GLOBAL)
        view.setVisibility(View.INVISIBLE)
        return@OnTouchListener true
    } else {
        return@OnTouchListener false
    }
})

// to view
toView.setOnDragListener(View.OnDragListener { view, event -&amp;gt;
    if (event.action == DragEvent.ACTION_DROP) {
        // do something for drop
        (event.localState as View).visibility = View.INVISIBLE
    } else if (event.action == DragEvent.ACTION_DRAG_ENDED) {
        val v = (event.localState as View)
        v.post({ v.visibility = View.VISIBLE })
    }
    return@OnDragListener true
})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Long as ymd</title>
      <link>http://tommykw.github.io/post/long-as-ymd/</link>
      <pubDate>Sat, 30 Jul 2016 19:44:16 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/long-as-ymd/</guid>
      <description>&lt;p&gt;I seconds from the time, minute, I tried to calculate the time in Kotlin.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fun longAsYmd(Long time): Unit {
    val t = time.toInt()
    val second = t % 60
    val minutes = t / 60 % 60
    val hour = t / 60 / 60
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>To calculate the age</title>
      <link>http://tommykw.github.io/post/to-calculate-the-age/</link>
      <pubDate>Wed, 13 Jul 2016 21:17:33 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/to-calculate-the-age/</guid>
      <description>&lt;p&gt;I want to calculate the age from birthday.
I used the following libraries.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JakeWharton/ThreeTenABP&#34;&gt;https://github.com/JakeWharton/ThreeTenABP&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;JSR-310 backport for Android&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;val age = Period.between(LocalDate.of(1990, 1, 1), LocalDate.now())
age.years // 25
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Filename oneshot removement</title>
      <link>http://tommykw.github.io/post/filename-oneshot-removement/</link>
      <pubDate>Thu, 07 Jul 2016 19:04:03 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/filename-oneshot-removement/</guid>
      <description>&lt;p&gt;Filename remove command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls -al *.png | grep -v &amp;quot;fs8&amp;quot; | awk &#39;{print &amp;quot;rm &amp;quot;,$10}&#39; | sh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Filename oneshot replacement</title>
      <link>http://tommykw.github.io/post/filename-oneshot-replacement/</link>
      <pubDate>Thu, 07 Jul 2016 19:01:42 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/filename-oneshot-replacement/</guid>
      <description>&lt;p&gt;Filename replace command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -name &amp;quot;*-fs8*&amp;quot; | sed -e &#39;s/\(\(.*\)-fs8\(.*\)\)/mv \1 \2\3/g&#39; | sh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Rx.Single timer</title>
      <link>http://tommykw.github.io/post/Rx.Single-timer/</link>
      <pubDate>Thu, 23 Jun 2016 07:36:13 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/Rx.Single-timer/</guid>
      <description>&lt;p&gt;The timer processing introduce the following two of Pattern in Rx.Single.&lt;/p&gt;

&lt;p&gt;Repeat until OnError&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;callSingle().toObservable()
    .subscribeOn(Schedulers.io())
    .observeOn(AndroidSchedulers.mainThread())
    .repeatWhen { it.flatMap({ Observable.timer(50, TimeUnit.SECONDS)}) }
    .subscribe({
        doStuff()
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Repeat until OnSuccess&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;callSingle().toObservable()
    .subscribeOn(Schedulers.io())
    .observeOn(AndroidSchedulers.mainThread())
    .retryWhen { it.flatMap({ Observable.timer(50, TimeUnit.SECONDS)}) }
    .subscribe({
        doStuff()
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a need to convert once from Single to Observable&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
