<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Golang on Hola!! </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://tommykw.github.io/tags/golang/</link>
    <language>en-us</language>
    
    
    <updated>Tue, 12 Apr 2016 15:34:28 JST</updated>
    
    <item>
      <title>Monads tutorial</title>
      <link>http://tommykw.github.io/post/monads-tutorial/</link>
      <pubDate>Tue, 12 Apr 2016 15:34:28 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/monads-tutorial/</guid>
      <description>&lt;p&gt;In this article I check that how to use Monads.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stack hello world</title>
      <link>http://tommykw.github.io/post/stack-hello-world/</link>
      <pubDate>Wed, 06 Apr 2016 08:08:07 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/stack-hello-world/</guid>
      <description>

&lt;p&gt;Stack is famous for Haskell package manager.
As a web developer I am used to clear tutorial that I can understand and learn.
Let&amp;rsquo;s make a sample app.&lt;/p&gt;

&lt;h2 id=&#34;installing-stack:89ac81d93784c829817004930eb05e8f&#34;&gt;Installing Stack&lt;/h2&gt;

&lt;p&gt;Install on OSX through homebrew&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew update
$ brew install haskell-stack
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-a-new-app:89ac81d93784c829817004930eb05e8f&#34;&gt;Creating a new app&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ stack new hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stack has some templates you can use your app.&lt;/p&gt;

&lt;h2 id=&#34;installing-ghc:89ac81d93784c829817004930eb05e8f&#34;&gt;Installing GHC&lt;/h2&gt;

&lt;p&gt;Run this in your app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stack setup
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;building-an-executable:89ac81d93784c829817004930eb05e8f&#34;&gt;Building an Executable&lt;/h2&gt;

&lt;p&gt;You can build with stack build&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stack buuild
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run-the-app:89ac81d93784c829817004930eb05e8f&#34;&gt;Run the app&lt;/h2&gt;

&lt;p&gt;Runt the app. This is cool.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stack exec hello-world-exe
SomeFunc
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Generic Programming</title>
      <link>http://tommykw.github.io/post/generic_programming/</link>
      <pubDate>Sat, 26 Mar 2016 20:02:56 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/generic_programming/</guid>
      <description>

&lt;p&gt;Generic Programming is a computer programming method that does not depend on the data format.&lt;/p&gt;

&lt;h1 id=&#34;overview:d74cb76d365c0efc9271214cbdaf3963&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;Generic programming regardless of the fact that either pass or to instantiate the code in the data type,
or the data type as a parameter. You can use the same source code.
This programming is a very powerful, dynamic, highly parameterized software is difficult to understand
than more static software.&lt;/p&gt;

&lt;h1 id=&#34;such-as:d74cb76d365c0efc9271214cbdaf3963&#34;&gt;Such as&lt;/h1&gt;

&lt;h2 id=&#34;java:d74cb76d365c0efc9271214cbdaf3963&#34;&gt;Java&lt;/h2&gt;

&lt;p&gt;Generics has been added in JDK1.5. Generics of Java code to produce only one of the compiled version of the generic class.
Generics Java class can use only the object type as the type parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;Integer&amp;gt; // correct
List&amp;lt;int&amp;gt; // incorrect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generics is to check the correctness of the type at compile time.
Generic type information is removed through a process referred to as a type deletion.
This is referred to as the erasure type. Only the type information of the parent class is held.&lt;/p&gt;

&lt;p&gt;There are several grammar.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bounded type parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;class Dog&amp;lt;E extends Animal&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Multiple bounds&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;class Foo&amp;lt;E extends A &amp;amp; B &amp;amp; C&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Bounded wildcard&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;class Foo(List&amp;lt;? extends Number&amp;gt; list) {}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;haskell:d74cb76d365c0efc9271214cbdaf3963&#34;&gt;Haskell&lt;/h2&gt;

&lt;p&gt;Haskell parameterized type, parametric polymorphism, there is a type class.&lt;/p&gt;

&lt;h2 id=&#34;kotlin:d74cb76d365c0efc9271214cbdaf3963&#34;&gt;Kotlin&lt;/h2&gt;

&lt;p&gt;It is basically the same syntax as Java&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;out/in&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Extension And Infix</title>
      <link>http://tommykw.github.io/post/extension-infix/</link>
      <pubDate>Fri, 25 Mar 2016 15:15:29 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/extension-infix/</guid>
      <description>&lt;p&gt;I wrote a sample of the extension and the infix in Kotlin.
What is the infix. Infix ia a infix notation and You can use the infix notation.&lt;/p&gt;

&lt;p&gt;Extension&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; fun Int.sameAge(a:Int): Boolean { return this == a }
&amp;gt;&amp;gt;&amp;gt; 10.sameAge(10)
true
&amp;gt;&amp;gt;&amp;gt; 10.sameAge(12)
false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Infix and Extension&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; infix fun Int.sameAge(a:Int): Boolean { return this == a}
&amp;gt;&amp;gt;&amp;gt; 10 sameAge 10
true
&amp;gt;&amp;gt;&amp;gt; 10 sameAge 12
false
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>A comma separated</title>
      <link>http://tommykw.github.io/post/a-comma-separated/</link>
      <pubDate>Fri, 25 Mar 2016 15:06:18 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/a-comma-separated/</guid>
      <description>&lt;p&gt;Attempt to a comma-separated in Kotlin.
There are several patterns. It can be written more concisely than Java.&lt;/p&gt;

&lt;p&gt;On kotlinc-jvm
fold method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; val list = listOf(1,2,3,4,5)
&amp;gt;&amp;gt;&amp;gt; list.fold(StringBuilder()) { builder, i -&amp;gt; builder.append(&amp;quot;${i},&amp;quot;) }.substring(0, list.size * 2 - 1)
1,2,3,4,5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Work in progress: kotlin-stdlib buildString&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; buildString { append(list) }
[1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to use kotlin run function</title>
      <link>http://tommykw.github.io/post/how-to-use-kotlin-run-function2/</link>
      <pubDate>Fri, 25 Mar 2016 14:44:53 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/how-to-use-kotlin-run-function2/</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t know that how to use run function in Kotlin.
You might use as follows.&lt;/p&gt;

&lt;p&gt;On kotlinc-jvm&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; val caller = null ?: run { println(&amp;quot;init&amp;quot;); {} }
init
&amp;gt;&amp;gt;&amp;gt; caller()
kotlin.Unit
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Kotlin bytecode</title>
      <link>http://tommykw.github.io/post/kotlin-bytecode/</link>
      <pubDate>Fri, 18 Mar 2016 07:58:14 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/kotlin-bytecode/</guid>
      <description>&lt;p&gt;You are able to view the compoiled bytecode.&lt;br /&gt;
You can learn more about how it works under the covers.
Kotlin plugin for IDEA comes with a bytecode view tool.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tools&lt;/li&gt;
&lt;li&gt;Kotlin&lt;/li&gt;
&lt;li&gt;Show Kotlin Bytecode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is killer feature.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Way to get the method for java compat</title>
      <link>http://tommykw.github.io/post/Way-to-get-the-method-for-java-compat/</link>
      <pubDate>Wed, 16 Mar 2016 04:06:54 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/Way-to-get-the-method-for-java-compat/</guid>
      <description>&lt;p&gt;There is a way to get the method for java compat to become boolean name or getter name&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var bar: Int = 1
    @JvmName(&amp;quot;getBar&amp;quot;) get
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On a data class case&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data class Bar(@get:JvmName(&amp;quot;isBar&amp;quot;) val bar: Boolean)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Software design patterns</title>
      <link>http://tommykw.github.io/post/software-design-patterns/</link>
      <pubDate>Tue, 15 Mar 2016 06:20:50 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/software-design-patterns/</guid>
      <description>

&lt;h1 id=&#34;design-patterns-in-android-and-java-s-core-libraries:cedcc138f48c75a986f318fd6d62e527&#34;&gt;Design Patterns in Android and Java&amp;rsquo;s core libraries&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Abstract factory&lt;/li&gt;
&lt;li&gt;Builder&lt;/li&gt;
&lt;li&gt;Prototype&lt;/li&gt;
&lt;li&gt;Singleton&lt;/li&gt;
&lt;li&gt;Adapter&lt;/li&gt;
&lt;li&gt;Bridge&lt;/li&gt;
&lt;li&gt;Composite&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tommykw/GoogleAPI&#34;&gt;GoogleAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Facade&lt;/li&gt;
&lt;li&gt;Flyweight&lt;/li&gt;
&lt;li&gt;Proxy&lt;/li&gt;
&lt;li&gt;Chain of responsibility&lt;/li&gt;
&lt;li&gt;Command&lt;/li&gt;
&lt;li&gt;Interpreter&lt;/li&gt;
&lt;li&gt;Iterator&lt;/li&gt;
&lt;li&gt;Mediator&lt;/li&gt;
&lt;li&gt;Memento&lt;/li&gt;
&lt;li&gt;Observer&lt;/li&gt;
&lt;li&gt;State&lt;/li&gt;
&lt;li&gt;Strategy&lt;/li&gt;
&lt;li&gt;Template method&lt;/li&gt;
&lt;li&gt;Visitor&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Get the app apk from Android terminal</title>
      <link>http://tommykw.github.io/post/second/</link>
      <pubDate>Fri, 20 Nov 2015 22:26:00 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/second/</guid>
      <description>&lt;p&gt;1.Connect to Android terminal
2.adb shell pm list packages -f | grep $packagename
3.apk pull $packagename&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Every day UI Automator</title>
      <link>http://tommykw.github.io/post/first/</link>
      <pubDate>Fri, 20 Nov 2015 22:25:05 JST</pubDate>
      
      <guid>http://tommykw.github.io/post/first/</guid>
      <description>&lt;p&gt;UI Automator is UI testing framework on Android. suitable for cross-app functional UI testing across system and installed apps.
Attempt to search new application design with UI Automator every day!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Usage
&lt;code&gt;
Android Studio 
Tools 
Android 
Android Device Monitor 
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
